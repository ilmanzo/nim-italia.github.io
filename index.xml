<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Home on Nim Italia</title><link>https://nim-italia.github.io/</link><description>Recent content in Home on Nim Italia</description><generator>Hugo -- gohugo.io</generator><language>it-it</language><lastBuildDate>Tue, 28 Sep 2021 19:19:32 +0200</lastBuildDate><atom:link href="https://nim-italia.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Raspberry Pico RP2040</title><link>https://nim-italia.github.io/embedded/raspberryrp2040/</link><pubDate>Tue, 21 Sep 2021 19:19:32 +0200</pubDate><guid>https://nim-italia.github.io/embedded/raspberryrp2040/</guid><description>Scritto da Andrea Martin
il Raspberry Pico è una minucscola scheda che monda un piccolo, ma potente microprocessore dalle seguenti caratteristiche:
Processore Dual-Core Arm Cortex M0+. Clock da 133Mhz. 264Kb Sram e 2MB di falsch Memory on board. Usb 1.1 26 pin I/O (multifunzione). Canali PWM, IC2, Dac-12bit. e molto altro&amp;hellip; La programmazione &amp;ldquo;naturale&amp;rdquo; di questo dispositivo è ovviamente in C, ma ne parliamo qui perchè si stà sviluppando un wrapper per poterlo utilizzare anche con Nim.</description></item><item><title>Alias, Strutture Dati, Puntatori e Riferimenti</title><link>https://nim-italia.github.io/guide/strutture-dati-e-puntatori/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nim-italia.github.io/guide/strutture-dati-e-puntatori/</guid><description>Scritto da Raffaele
Alias Un alias è semplicemente un modo per poter fare riferimento ad un tipo esistente tramite un altro nome.
Se si utilizza la parola chiave distinct si definisce un tipo distinto ma che possiede lo stesso layout del tipo &amp;ldquo;sorgente&amp;rdquo;.
type Foo = uint ## Alias per un numero intero senza segno. Bar = distinct uint ## Definizione di un tipo distinto da uint ma che ha lo stesso layout ## in memoria.</description></item><item><title>Funzioni</title><link>https://nim-italia.github.io/guide/funzioni/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nim-italia.github.io/guide/funzioni/</guid><description>Scritto da Raffaele
Le funzioni sono il metodo fondamentale per poter dividere un programma in più &amp;ldquo;sotto-programmi&amp;rdquo;: per dichiarare una funzione si usa proc.
# Dichiaro una funzione che prende due numeri interi con segno come # parametri e restituisce un intero. proc somma(a, b: int): int = result = a + b È possibile notare una variabile di nome result all&amp;rsquo;interno della funzione: quella è la variabile implicita usata per restituire il valore alla funzione chiamante, ma è possibile anche usare return &amp;lt;valore&amp;gt; per restituire il valore.</description></item><item><title>var, let e const</title><link>https://nim-italia.github.io/guide/var_let_const/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nim-italia.github.io/guide/var_let_const/</guid><description>Scritto da Andrea Manzini
questo articolo è stato tradotto da Nim by Example
var: variabili mutabili var a = &amp;#34;pippo&amp;#34; b = 0 # Works fine, initialized to 0 c: int # funziona, le variabili sono mutable a.add(&amp;#34;pluto&amp;#34;) b += 1 c = 3 echo a,b,c let: variabili immutabili let d = &amp;#34;tizio&amp;#34; e = 5 # f: float # errore di compilazione, la variabile deve assumere un valore # assegnare nuovi valori a queste variabili, `d` and `e`, causerebbe errore di compilazione #d.</description></item></channel></rss>